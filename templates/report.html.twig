{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Report</h1>
    <h2 id="kmom01"><a href="#kmom01">Kmom01</a></h2>
    <p>Mina tidigare erfarenheter av objektorientering kommer framförallt ifrån Oopython-kursen. Jag känner igen mycket ifrån den kursen, även om syntaxen såklart är annorlunda i PHP. Det tar alltid ett litet tag innan jag hinner "smälta" en ny syntax, så just nu känns det "lite fel" att skriva pilar, this och dollartecken, men det vänjer man ju snabbt sig vid.</p>
    <p>För att kunna göra sina första klasser är nog det viktigaste man behöver känna till att $this hänvisar till instansen av objektet samt att attribut bör göras privata.</p>
    <p>Angående kodbasen känns den väl också lite rörig såhär i början, som vanligt, men samtidigt börjar man bli mer och mer bekant med strukturen från tidigare kurser. Det är mest bild-delen som jag inte riktigt känner att jag har koll på, i och med att man kunde länka till bilderna på flera olika sätt.</p>
    <p>Jag kikade i Code Style Guide, samt laddade ned phpcs, så det var uppenbarligen något som jag fastnade för i PHP: The Right Way. Annars tycker jag att säkerhet känns intressant och framförallt väldigt viktigt.</p>
    <p>Min TIL är att en autoloader kan hjälpa till genom att bara ladda in klasser vid behov. Det var smidigt!</p>
    <h2 id="kmom02"><a href="#kmom02">Kmom02</a></h2>
    <p>Arv i objektorienterad PHP handlar om att en klass kan ärva funktionalitet och attribut från en annan. Den här veckan har vi t.ex. arbetat med CardGrapic som ärver från Card. Detta gör att man får en kod som är mer DRY i och med att man inte behöver skriva samma kod flera gånger. Komposition handlar om att två klasser är kopplade till varandra, på samma sätt som ett hus har ett rum. Med hjälp av ett interface kan man bestämma vilka metoder som en klass måste implementera. Trait har jag inte läst så mycket om än, men jag förstår det som att det handlar om att inkludera andra delar av koden inuti t.ex. en klass.</p>
    <p>Jag utgick ifrån Dice-övningen när jag skulle lösa uppgiten, och försökte göra på ett liknande sätt. Polletten har inte riktigt trillat ner för mig när det kommer till objektorientering än, det känns inte naturligt för mig att jobba med, så jag är glad och nöjd över att jag ändå lyckades lösa uppgiften, även om min lösning kanske inte blev så bra. T.ex. innehåller min CardGraphic-klass alla UTF-8-tecken som representerar korten - när jag sedan skapar min kortlek med CardGraphic-kort får jag alltså 4 sviter * 13 kort för varje instans av CardGraphic, trots att varje kort bara behöver ett tecken. Det hade man säkert kunnat lösa på ett bättre sätt. Jag lyckades inte heller komma på hur jag skulle färga rätt kort röda, jag ville ge dem en CSS-klass och sätta stilen på det sättet, men jag fick inte till det på grund av att jag skriver ut korten som strängar, inte klasser. Om jag skrev ut korten som klasser hade jag kunnat anropa card.getSuite() och använda en if-sats i Twig för att sätta rätt stil, det var i alla fall min plan.</p>
    <p>Det fungerar ganska bra att jobba i Symfony och med MVC. Jag börjar bli lite mer bekväm med filstrukturen.</p>
    <p>Min TIL är att man behöver fixa till sina array-indexes om man tar bort något (ett kort till exempel) från arrayen. Jag var väldigt förvirrad i några timmar innan jag stötte på <a href="https://www.php.net/manual/en/function.array-values.php">array_values</a>.</p>
    <h2 id="kmom03"><a href="#kmom03">Kmom03</a></h2>
    <p>Jag uppskattar att man fick lite mer tid på sig för den här uppgiften, eftersom det gjorde att man kunde tillåta sig själv att lägga några timmar på problemlösnings-delen, utan att känna sig stressad. Jag tycker om att skissa och anteckna på papper när jag kör fast eller har en större uppgift framför mig, därför gjorde jag den större delen av problemlösningen på det sättet och försökte sedan översätta det jag hade skrivit till en flowchart och pseudokod. Jag skulle nog behöva öva lite mer på pseudokodsdelen, för mig blir det lätt att jag skriver vanliga meningar istället för en text som mer liknar kod.</p>
    <p>Jag är ganska nöjd med min implementation, men den blev inte helt som jag hade tänkt mig. Det som känns positivt är att jag fick till UTF-8-tecknen och att jag lyckades göra rätt kort röda, samt att "spelplanen" blev som jag ville. Det som hade kunnat vara bättre är att koden inte blev helt DRY när det kommer till hur banken fungerar. Jag hade tänkt att jag skulle ändra "nuvarande spelare" från "player" till banken, och att banken sedan skulle använda min draw-route på samma sätt som "player" gjorde. Det hade varit lite coolt att låta banken dra ett kort åt gången via den routen, med hjälp av någon sorts fördröjning, det var min ursprungliga tanke. Istället la jag in en while-loop som gör att banken drar alla sina kort på en och samma gång när man klickar på STOP. Den while-loopen hade förövrigt kunnat vara en del av Game-klassen egentligen.</p>
    <p>Känslan av själva Symfony är bra, men jag måste säga att jag ibland upplever min webbplats som otroligt långsam, och jag undrar om det har med min kod att göra eller något annat. Webbplatsen i design-kursen var också ganska långsam ibland, och där använde vi också Twig... hmm...</p>
    <p>Lite kort om linters: jag löste allt som phpmd klagade på (hade missat att skriva variabelnamn i camelCase, så det blev en del), och ganska mycket som phpstan ville att jag skulle fixa. Men nu känner jag mig nöjd med hur koden ser ut. Jag lyckades dock aldrig stänga av felmeddelandena som jag inte löste, därför ser det inte särskilt vackert ut när man kör composer phpstan - ville bara förtydliga varför den "rapporten" inte är tom.</p>
    <p>Min TIL är att man kan tjäna mycket på att ta ett steg tillbaka och problemlösa innan man börjar koda! Det visste jag givetvis redan innan, men ofta känner man sig stressad av allt som ska göras och tar sig inte riktigt den tiden. Jag ska försöka göra det mer i framtiden.</p>
{% endblock %}