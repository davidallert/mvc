{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Report</h1>
    <h2 id="kmom01"><a href="#kmom01">Kmom01</a></h2>
    <p>Mina tidigare erfarenheter av objektorientering kommer framförallt ifrån Oopython-kursen. Jag känner igen mycket ifrån den kursen, även om syntaxen såklart är annorlunda i PHP. Det tar alltid ett litet tag innan jag hinner "smälta" en ny syntax, så just nu känns det "lite fel" att skriva pilar, this och dollartecken, men det vänjer man ju snabbt sig vid.</p>
    <p>För att kunna göra sina första klasser är nog det viktigaste man behöver känna till att $this hänvisar till instansen av objektet samt att attribut bör göras privata.</p>
    <p>Angående kodbasen känns den väl också lite rörig såhär i början, som vanligt, men samtidigt börjar man bli mer och mer bekant med strukturen från tidigare kurser. Det är mest bild-delen som jag inte riktigt känner att jag har koll på, i och med att man kunde länka till bilderna på flera olika sätt.</p>
    <p>Jag kikade i Code Style Guide, samt laddade ned phpcs, så det var uppenbarligen något som jag fastnade för i PHP: The Right Way. Annars tycker jag att säkerhet känns intressant och framförallt väldigt viktigt.</p>
    <p>Min TIL är att en autoloader kan hjälpa till genom att bara ladda in klasser vid behov. Det var smidigt!</p>
    <h2 id="kmom02"><a href="#kmom02">Kmom02</a></h2>
    <p>Arv i objektorienterad PHP handlar om att en klass kan ärva funktionalitet och attribut från en annan. Den här veckan har vi t.ex. arbetat med CardGrapic som ärver från Card. Detta gör att man får en kod som är mer DRY i och med att man inte behöver skriva samma kod flera gånger. Komposition handlar om att två klasser är kopplade till varandra, på samma sätt som ett hus har ett rum. Med hjälp av ett interface kan man bestämma vilka metoder som en klass måste implementera. Trait har jag inte läst så mycket om än, men jag förstår det som att det handlar om att inkludera andra delar av koden inuti t.ex. en klass.</p>
    <p>Jag utgick ifrån Dice-övningen när jag skulle lösa uppgiten, och försökte göra på ett liknande sätt. Polletten har inte riktigt trillat ner för mig när det kommer till objektorientering än, det känns inte naturligt för mig att jobba med, så jag är glad och nöjd över att jag ändå lyckades lösa uppgiften, även om min lösning kanske inte blev så bra. T.ex. innehåller min CardGraphic-klass alla UTF-8-tecken som representerar korten - när jag sedan skapar min kortlek med CardGraphic-kort får jag alltså 4 sviter * 13 kort för varje instans av CardGraphic, trots att varje kort bara behöver ett tecken. Det hade man säkert kunnat lösa på ett bättre sätt. Jag lyckades inte heller komma på hur jag skulle färga rätt kort röda, jag ville ge dem en CSS-klass och sätta stilen på det sättet, men jag fick inte till det på grund av att jag skriver ut korten som strängar, inte klasser. Om jag skrev ut korten som klasser hade jag kunnat anropa card.getSuite() och använda en if-sats i Twig för att sätta rätt stil, det var i alla fall min plan.</p>
    <p>Det fungerar ganska bra att jobba i Symfony och med MVC. Jag börjar bli lite mer bekväm med filstrukturen.</p>
    <p>Min TIL är att man behöver fixa till sina array-indexes om man tar bort något (ett kort till exempel) från arrayen. Jag var väldigt förvirrad i några timmar innan jag stötte på <a href="https://www.php.net/manual/en/function.array-values.php">array_values</a>.</p>
    <h2 id="kmom03"><a href="#kmom03">Kmom03</a></h2>
    <p>Jag uppskattar att man fick lite mer tid på sig för den här uppgiften, eftersom det gjorde att man kunde tillåta sig själv att lägga några timmar på problemlösnings-delen, utan att känna sig stressad. Jag tycker om att skissa och anteckna på papper när jag kör fast eller har en större uppgift framför mig, därför gjorde jag den större delen av problemlösningen på det sättet och försökte sedan översätta det jag hade skrivit till en flowchart och pseudokod. Jag skulle nog behöva öva lite mer på pseudokodsdelen, för mig blir det lätt att jag skriver vanliga meningar istället för en text som mer liknar kod.</p>
    <p>Jag är ganska nöjd med min implementation, men den blev inte helt som jag hade tänkt mig. Det som känns positivt är att jag fick till UTF-8-tecknen och att jag lyckades göra rätt kort röda, samt att "spelplanen" blev som jag ville. Det som hade kunnat vara bättre är att koden inte blev helt DRY när det kommer till hur banken fungerar. Jag hade tänkt att jag skulle ändra "nuvarande spelare" från "player" till banken, och att banken sedan skulle använda min draw-route på samma sätt som "player" gjorde. Det hade varit lite coolt att låta banken dra ett kort åt gången via den routen, med hjälp av någon sorts fördröjning, det var min ursprungliga tanke. Istället la jag in en while-loop som gör att banken drar alla sina kort på en och samma gång när man klickar på STOP. Den while-loopen hade förövrigt kunnat vara en del av Game-klassen egentligen.</p>
    <p>Känslan av själva Symfony är bra, men jag måste säga att jag ibland upplever min webbplats som otroligt långsam, och jag undrar om det har med min kod att göra eller något annat. Webbplatsen i design-kursen var också ganska långsam ibland, och där använde vi också Twig... hmm...</p>
    <p>Lite kort om linters: jag löste allt som phpmd klagade på (hade missat att skriva variabelnamn i camelCase, så det blev en del), och ganska mycket som phpstan ville att jag skulle fixa. Men nu känner jag mig nöjd med hur koden ser ut. Jag lyckades dock aldrig stänga av felmeddelandena som jag inte löste, därför ser det inte särskilt vackert ut när man kör composer phpstan - ville bara förtydliga varför den "rapporten" inte är tom.</p>
    <p>Min TIL är att man kan tjäna mycket på att ta ett steg tillbaka och problemlösa innan man börjar koda! Det visste jag givetvis redan innan, men ofta känner man sig stressad av allt som ska göras och tar sig inte riktigt den tiden. Jag ska försöka göra det mer i framtiden.</p>
    <h2 id="kmom04"><a href="#kmom04">Kmom04</a></h2>
    <h3>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h3>
    <p>Eftersom vi jobbade lite med enhetstester i Oopython-kursen kändes konceptet bekant. Jag var en smula förvånad över att enhetstester i PHP fungerar nästan precis likadant som i Python, men det gjorde det enklare att komma igång, så det var tacksamt.</p>

    <h3>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h3>
    <p>Ja, jag lyckades precis komma över gränsen. Om mina tester är värdefulla är dock en annan fråga... men jag hoppas att de ska duga. Vissa saker kändes lite svåra att testa på ett "rent" sätt, jag kände ofta att jag behövde blanda in flera av klassens metoder för att få ihop det.</p>

    <h3>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h3>
    <p>Till viss del, men jag märkte ganska tydligt att metoder som är lite längre/mer komplicerade som t.ex. getVictoryResult() i min Game-klass var svårare att testa.</p>

    <h3>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h3>
    <p>Jo det ligger nog något i det, ju mindre klassens metoder är, desto enklare är de att testa, och om man skriver små, korta metoder blir de nischade och snygga per automatik.</p>

    <h3>Vilken är din TIL för detta kmom?</h3>
    <p>Min TIL är att enhetstester kan fungera på liknande sätt i flera programmeringsspråk, samt att det finns verktyg som Xdebug som kan hjälpa en att visualisera testernas täckningsgrad.</p>
    <h2 id="kmom05"><a href="#kmom05">Kmom05</a></h2>
    <p>Studentservern har legat nere i ett par dagar när jag skriver detta, förhoppningsvis har sakerna hunnit laddas upp innan någon läser inlämningen :)</p>

    <p>När jag byggde min applikation försöke jag placera länkarna i nivåer. I den översta nivån kan man skapa en ny bok eller titta på böckerna som finns. Att titta på böckerna är nästa nivå - klickar man sig in på en enskild bok kommer man till den tredje nivån där man kan redigera eller ta bort den.</p>

    <p>Ärligt talat hänger jag inte riktigt med på hur ORM fungerar än så länge och t.ex. vad ett repository är. Det fastnade inte riktigt. Jag tror inte att jag gillar när det blir för många lager mellan koden man skriver och det som "faktiskt händer". Det känns tydligare när man skriver sina egna SQL-satser. Men ORM kan säkert vara väldigt smidigt när man väl vänjer sig och lär sig mer. Att skapa klasserna och tabellerna via terminalen gick t.ex. väldigt snabbt och enkelt.</p>

    <p>Jag tror inte att jag har arbetat så mycket med post-requests tidigare i den här kursen så min TIL är hur man kan arbeta med Request i Symfony.</p>
    <h2 id="kmom06"><a href="#kmom06">Kmom06</a></h2>
    <p>PhpMetrics tyckte jag inte om, verktyget var alldeles för vagt och talade inte om vilka rader det var fel på, i alla fall så hittade inte jag någon sådan funktion. Jag tycker inte heller att det är särskilt värdefullt att den påstår att något "antagligen är buggat" eller "innehåller 0.3 buggar"... jag känner inte att det hjälper mig. Att något, någonstans, kanske är buggat kan jag anta på egen hand! :)</p>

    <p>Scrutinizer känns bättre, verktyget ger mer konkreta tips och en överblick över hur väl man har testat sina klasser. Badges är ju alltid kul, men som i mitt fall där jag insåg att jag har med en massa testfiler m.m. som drar ned kod-coverage blir det ju mindre kul.</p>

    <p>Jag tror kanske inte att man kan påvisa kod<b>kvalitet</b> med verktyg och annat, däremot kan man påvisa att kod<b>stilen</b> stämmer överens med konstens alla regler o.s.v. Jag tror säkert att man kan skriva ett ineffektivt program som får en massa gröna bockar och badges för att man har delat upp koden i små delar och inte använder else-satser och dylikt, men som likväl är ineffektivt... Å andra sidan ser jag att det krävs ganska mycket jobb för att nå höga siffror i vissa av testverktygen, så lyckas man med det kan man nog vara ganska säker på att arbetet inte är ett hafsverk åtminstone. Men betyder det att koden är kvalitativ och "bra"? Nja... kanske, kanske inte.</p>
    <h2 id="kmom10"><a href="#kmom10">Kmom10</a></h2>
    <h3>Krav 1, 2, 3</h3>
    <p>Jag valde äventyrsspelet som fokus för mitt projekt. Det verkade något svårare än vissa av de andra valen, men jag har alltid gillat att spela och tänkte att det var bättre att välja något som verkade roligt snarare än att bara gå på det enklaste valet, det gör det lättare att hålla motivationen uppe.</p>

    <p>Spelet går ut på att man ska plocka upp olika saker och använda dem för att ta sig framåt. Jag la också till en halvdan story bara för att skapa någon sorts sammanhang för spelaren.</p>

    <p>Spelets innehåll utgår ifrån ett antal databastabeller som renderar ut innehåll dynamiskt i en Twig-template-fil. Jag har försökt se till att göra en så dynamisk lösning som möjligt, men jag hann inte riktigt hela vägen, därför är viss funktionalitet mer hårdkodad än önskvärt i kontrollern, som t.ex. några av flashmeddelandena. En annan sak som är värd att nämna är att jag använder position: absolute och avstånd i pixlar för att placera ut sakerna, vilket innebär att man måste använda sig av skärmupplösningen 1920 x 1080 för att de ska vara utplacerade på rätt ställen.</p>

    <h3>Krav 4</h3>
    <p>För krav 4 skapade jag en separat kontroller, AdventureJsonApi.php, som innehåller alla API-routes. De flesta är ganska lika – de hämtar data från ett repository, itererar över datan som hittas, lägger till den i en array och returnerar ett JsonResponse som innehåller denna array.</p>

    <p>Det svåraste var att få POST-routen att fungera. Där behövde jag använda mig av Request i Symfony och bara lägga till datan om den hittade spelaren/karaktären med namnet som skickades in. Jag la också till en array inuti karaktärs-arrayen som innehåller alla saker som karaktären just nu har i sin väska.</p>

    <h3>Krav 5</h3>
    <p>Jag läste igenom kraven innan jag började och insåg att om jag skulle göra detta kravet, så var det bäst att utgå ifrån det. Innan jag började programmera skissade jag lite på papper för att försöka komma underfund med vilka tabeller jag skulle behöva i databasen. Jag landade i att ha en tabell för rummen i spelet (Room), en för spelarens karaktär (Character), en för karaktärens unika väska (Bag) samt en för sakerna som ska finnas utplacerade i rummen (Item). Jag kände ganska snabbt att jag hade tagit mig vatten över huvudet när jag började, eftersom det var en ganska liten del av kursen som vi ägnade åt ORM, men efter mycket googlande och lite AI-hjälp så fick jag ihop det till slut. Det jag hade svårast för var hur item-klassen skulle kunna förvaras i en väska samt hur en väska skulle kunna kopplas till en karaktär. Bag-förvaringen löstes genom att serialisera Item-klasserna, och kopplingen löstes genom en OneToOne-koppling mellan Character och Bag.</p>
    <h3>Krav 6</h3>
    <p>Det är svårt att avgöra vad som är värt att ta upp här, men jag har några saker som jag har lagt lite extra tid eller tankekraft på så jag testar att ta med dem så får vi se om det duger.</p>
    <h4>Dynamiska Items</h4>
    <p>Innan jag började med projektet var min största huvudvärk hur jag skulle lyckas med att placera ut saker i rummen samt göra så att användaren skulle kunna interagera med dem. Man hade kunnat göra det textbaserat, såsom i en av bilderna i instruktionen (<a href="https://dbwebb.se/img/kurs/mvc/adventure_game2.png">https://dbwebb.se/img/kurs/mvc/adventure_game2.png</a>) men jag ville att det skulle kännas mer som spelen jag spelade när <i>jag</i> var liten, då skulle man ofta klicka på olika saker och förflytta sig genom att klicka på pilar. Ungefär såhär:</p>
    <img src="{{ asset('img/findus.png') }}">

    <p>För att göra detta har jag gjort en lösning som säkert inte är den snyggaste, men det var den jag kunde komma på. Jag skickar med alla saker (Items) i $data när webbsidan renderas, sedan itererar jag över alla saker, och om saken har ett roomId som matchar det nuvarande rummet renderas det och placeras ut med hjälp av inline-CSS. Jag har även lagt in opacity för att kunna göra ”spöket” i rum 2 genomskinligt samt göra en annan sak ”osynlig”.</p>

    <h4>Koppling mellan Character och Bag</h4>
    <p>Detta var utmanande eftersom det inte är något som vi har gått igenom i kursen. Jag insåg en bit in i projektet att jag ville ha en koppling mellan karaktären och väskan, så att man kan ha flera karaktärer som har olika saker i sina väskor.
    För att åstadkomma detta la jag till denna kod i Character:</p>
    <pre>
    #[ORM\OneToOne(targetEntity: Bag::class, inversedBy: "character", cascade: ["persist", "remove"])]
    #[ORM\JoinColumn(name: "bag_id", referencedColumnName: "id")]
    private ?Bag $bag = null;
    </pre>
    <p>och denna i Bag:</p>
    <pre>
    #[ORM\OneToOne(targetEntity: Character::class, mappedBy: "bag", cascade: ["persist", "remove"])]
    private ?Character $character = null;
    </pre>
    <h4>Utökat spel</h4>
    <p>Jag la till några extra rum i mitt spel för att försöka göra det lite mer intressant. T.ex. rum 5 som inte fyller någon funktion utan bara är en återvändsgränd, samt rum 7 som jag la till för att spelet inte skulle få ett lika abrupt slut. Jag hade kunnat göra spelet mycket kortare genom att man t.ex. börjar i rum 1, hittar en nyckel i rum 2, och sedan låser upp vägen ut i rum 3 eller något i den stilen, och det hade antagligen också blivit godkänt, men jag la lite extra tid på att försöka göra spelet bättre. Jag har också lagt till att story-texten inte visas upp om man går in i ett rum man har ”klarat”, samt en ganska irriterande, men också ganska passande, musikslinga som går på loop i alla rum. (Jag sökte på ”free dungeon music” och tog första bästa.) Eftersom audio-autoplay tydligen inte är tillåtet (av webbläsarna) behövde jag skapa en workaround; musiken börjar spelas när JavaScript-eventlyssnaren ”mousemove” aktiveras.</p>
    <h3>Allmänt stycke</h3>
    <p>Jag tycker att det var ett rimligt projekt för kursen. Det klurigaste var att komma igång, vilket för mig handlade om ORM och databasen eftersom det var i den änden jag började. Det var lite svårare än jag hade tänkt mig, och det kändes som att jag inte riktigt hade förkunskaperna för att kunna lösa det egentligen, så det blev en del googlande och frågor till ChatGPT inledningsvis. När jag väl fick grunden på plats gick det ganska smidigt att ta mig framåt. Det var roligt att man fick möjligheten att göra ett sådant här spel, och jag uppskattar alltid när man har flera alternativ att välja mellan när det kommer till projektet, precis som vi fick i det här fallet.</p>
    <h3>Tankar om kursen</h3>
    <p>Bra kurs tycker jag, och Mos är stabil som vanligt. Det enda jag har känt som har varit negativt är att jag personligen inte tycker att det är roligt med enhetstester, linters, kodstil och hela den biten. Jag förstår att det är viktiga saker att kunna dock, så det är ju bra att de ingår i kursen.</p>
    <p>Man hade kanske kunnat lägga lite mer fokus på ORM om det ska vara ett krav i projektet, en veckas studier på 50% kommer man inte så långt på. Däremot var det väldigt bra att vi fick två veckor på ett kursmoment där i början, det behövde man, så jag förstår att det kan vara svårt att göra den tidsavvägningen. På det stora hela har det varit en bra kurs som bl.a. har hjälpt mig att bli lite bättre på objektorientering. 8/10 får den!</p>

{% endblock %}